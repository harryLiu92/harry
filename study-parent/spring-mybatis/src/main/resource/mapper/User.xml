<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.liuhao.mybatis.dao.UserDao">

<sql id="BASE_SQL_SELECT">
	id,userId,userName,userAge,userAddress,company
</sql>

    <!-- select语句 -->
    <select id="selectUserByUserId" parameterType="com.liuhao.mybatis.entity.User" resultType="com.liuhao.mybatis.entity.User">
        select 
        <include refid="BASE_SQL_SELECT"></include>
        from `t_user`  where userId = #{userId, jdbcType=INTEGER}
    </select>

    <!-- select语句 -->
    <select id="selectUserByID" parameterType="com.liuhao.mybatis.entity.User" resultType="com.liuhao.mybatis.entity.User">
        select 
        <include refid="BASE_SQL_SELECT"></include>
        from `t_user`  where userId = #{userId, jdbcType=INTEGER} and userAge = #{userAge, jdbcType=INTEGER}
    </select>
    
    <!-- 定义的resultMap，可以解决类的属性名和数据库列名不一致的问题-->
    <!-- <resultMap type="com.liuhao.mybatis.entity.User" id="userResultMap">
        <id property="id" column="user_id"  />
        <result property="userName" column="user_userName"  />
        <result property="userAge" column="user_userAge"  />
        <result property="userAddress" column="user_userAddress"  />
    </resultMap> -->
    
    <!-- 返回list的select语句，注意 resultMap的值是指向前面定义好的 -->
    <!-- <select id="selectUsersByName" parameterType="string" resultMap="userResultMap">
        select * from user where user.userName = #{userName}
    </select> -->
    
    <select id="selectUsersByName" parameterType="string" resultType="com.liuhao.mybatis.entity.User">
        select * from t_user where user.userName = #{userName}
    </select>
    
    <!-- select语句 -->
    <select id="selectUserDynamicWhere" parameterType="com.liuhao.mybatis.entity.User" resultType="java.util.Map">
        select u.id, u.userName, u.userAge, u.userAddress from t_user u
        <where>
        	<if test="userName != null and userName != '' ">
        		and u.userName like CONCAT('%', #{userName, jdbcType = VARCHAR}, '%')
        	</if>
     	    <if test="userAge > 28 ">
        		and u.userAge = #{userAge, jdbcType = INTEGER}
        	</if>
     	    <if test="userAddress != null and userAddress != '' ">
        		and u.userAddress = #{userAddress, jdbcType = VARCHAR}
        	</if>
        </where> 
    </select>

    <!-- select语句 -->
    <resultMap type="com.liuhao.mybatis.entity.response.UserCompanyDto" id="UserCompanyResult">
    	<id column="id" property="id" />
    	<result column="userName" property="userName" />
    	<result column="userAge" property="userAge" />
    	<result column="userAddress" property="userAddress" />

    	<result column="companyName" property="companyName" />
    	<result column="companyPersons" property="companyPersons" />
    	<!-- column是数据库的字段名, property是实体类的属性名 -->
    	<result column="companyAddress222" property="companyAddress" />
    </resultMap>

    <parameterMap type="java.util.Map" id="UserCompanyParameter">
    	<parameter property="userName"/>
    	<parameter property="userAge"/>
    	<parameter property="userAddress"/>
    	<parameter property="companyAddress"/>
    </parameterMap>
	<!-- companyAddress222是响应字段名,companyAddress是请求字段名,c.address是数据库字段名 三者不同 -->
	<!-- parameterType是指定类型,parameterMap是临时类型  resultType和resultMap同上 -->
    <select id="selectUserParamResultMap" parameterMap="UserCompanyParameter" resultMap="UserCompanyResult">
        select u.id, u.userName, u.userAge, u.userAddress, c.name companyName, c.persons companyPersons, c.address companyAddress222 from t_user u LEFT JOIN company c ON c.id = u.company
        <where>
        	<if test="userName != null and userName != '' ">
        		and u.userName like CONCAT('%', #{userName, jdbcType = VARCHAR}, '%')
        	</if>
     	    <if test="userAge > 28 ">
        		and u.userAge = #{userAge, jdbcType = INTEGER}
        	</if>
     	    <if test="userAddress != null and userAddress != '' ">
        		and u.userAddress = #{userAddress, jdbcType = VARCHAR}
        	</if>
        	<!--company是查询参数中的一段java代码 -->
     	    <if test=" companyAddress != null and companyAddress != '' ">
        		and c.address = #{companyAddress, jdbcType = VARCHAR}
        	</if>
        </where>
    </select>

    <!-- select语句 -->
    <select id="selectUserIn" resultType="java.util.Map">
        select u.id, u.userName, u.userAge, u.userAddress from t_user u
        <where>
        	<if test="userName != null and userName != '' ">
        		and u.userName like CONCAT('%', #{userName, jdbcType = VARCHAR}, '%')
        	</if>
     	    <if test="userAge > 28 ">
        		and u.userAge = #{userAge, jdbcType = INTEGER}
        	</if>
     	    <if test="userAddress != null and userAddress != '' ">
        		and u.userAddress = #{userAddress, jdbcType = VARCHAR}
        	</if>
        </where> 
    </select>

    <!--执行增加操作的SQL语句。id和parameterType分别与IUserOperation接口中的addUser方法的名字和参数类型一致。
    useGeneratedKeys设置为"true"表明要MyBatis获取由数据库自动生成的主键；keyProperty="id"指定把获取到的主键值注入到User的id属性--> 
    <insert id="addUser" parameterType="com.liuhao.mybatis.entity.User" 
        useGeneratedKeys="true" keyProperty="id"> 
        insert into t_user(userId,userName,userAge,userAddress,company)  
             values(#{userId},#{userName},#{userAge},#{userAddress},#{company})  
    </insert>
    
    <update id="updateUser" parameterType="com.liuhao.mybatis.entity.User" >
        update t_user set userName=#{userName},userAge=#{userAge},userAddress=#{userAddress} where userId=#{userId}
    </update>
    
    <delete id="deleteUser" parameterType="int">
        delete from t_user where userId=#{userId}
    </delete>
    
</mapper>